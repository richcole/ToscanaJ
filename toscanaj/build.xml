<?xml version="1.0" encoding="UTF-8"?>
<!--
  Main build file for ToscanaJ.
  
  All documented targets are considered public, the ones without the "description"
  attribute are considered private. Configuration is done through the build.properties
  file which should be beside this file.
  
  The default target will create all available release downloads in one go. This can take
  a while, you might want to check out the other distribution targets, most noticably
  "dist", which creates only the standard user download.
-->
<project name="ToscanaJ" default="fullDist" basedir=".">
	<!-- property inclusion and classpath setup -->
	<property file="build.properties"/>

	<path id="project.libs.class.path">
		<fileset dir="${libs.dir}">
			<include name="**/*.jar"/>
		</fileset>
		<fileset dir="${libs.dir}">
			<include name="**/*.zip"/>
		</fileset>
	</path>
	<path id="project.dev.class.path">
		<pathelement path="${classpath}"/>
		<pathelement path="${build.dev.dir}"/>
		<path refid="project.libs.class.path"/>
		<fileset dir="${libs.dir}/testing">
			<include name="**/*.zip"/>
		</fileset>
	</path>
	<path id="project.release.class.path">
		<pathelement path="${classpath}"/>
		<pathelement path="${build.release.dir}"/>
		<path refid="project.libs.class.path"/>
		<fileset dir="${libs.dir}/testing">
			<include name="**/*.zip"/>
		</fileset>
	</path>
	
	<!-- Macro for creating a manifest using the Ant claspath -->
	<macrodef name="createManifest">
		<attribute name="targetApp"/>
		<attribute name="targetLoc"/>
		<sequential>
			<property name="cp" refid="project.libs.class.path"/>

			<!-- copy manifest over, replacing the @classpath@ placeholder -->
			<copy tofile="@{targetLoc}/@{targetApp}.MF" filtering="true">
				<fileset dir="${templates.dir}">
					<include name="manifest.mf" />
				</fileset>
				<filterset>
					<filter token="classpath" value="${cp} ToscanaJ.jar" />
					<filter token="app" value="@{targetApp}" />
				</filterset>
			</copy>
	
			<!-- replace path prefix with relative path -->
			<replace file="@{targetLoc}/@{targetApp}.MF" token="${basedir}" value="." />
	
			<!-- deal with file and path separators in an os independent way -->
			<replace file="@{targetLoc}/@{targetApp}.MF" token="${file.separator}" value="/" />
			<!-- we can't just replace the path.separator - on UNIXy systems this would hit
			     the colons between properties and values. But since all libs should be relative
			     to basedir, they should now all start with a dot, thus we can add the dot to
			     distinguish the path.separator from the property:value separator. -->
			<replace file="@{targetLoc}/@{targetApp}.MF" token="${path.separator}." value=" ." />
		</sequential>
	</macrodef>
	
	<!-- helper targets, not-public -->
	<target name="setBuildName">
		<tstamp>
			<format property="timestamp" pattern="yyyyMMdd-HHmm"/>
		</tstamp>
		<!-- we use the fact that dist.name won't be overridden, so we can set it in
		     build.properties if we want a release version -->
		<property name="dist.name" value="unstable-${timestamp}"/>
		<property name="target.dir" value="${dist.dir}/${app.name}-${dist.name}"/>
	</target>

	<target name="prepare" depends="setBuildName">
		<mkdir dir="${build.dev.dir}"/>
		<mkdir dir="${build.release.dir}"/>
	</target>
	
	<target name="prepareDist">
		<mkdir dir="${dist.dir}"/>
		<mkdir dir="${target.dir}"/>
	</target>

	<target name="makeReleaseJar" depends="compileRelease,prepareDist">
		<createManifest targetApp="${app.name}" targetLoc="${build.release.dir}"/>
		<jar jarfile="${target.dir}/${app.name}.jar" basedir="${build.release.dir}" manifest="${build.release.dir}/${app.name}.MF" excludes="${app.name}.MF"/>
	</target>

	<target name="createSienaStartJar">
		<createManifest targetApp="Siena" targetLoc="${build.release.dir}"/>
		<jar jarfile="${target.dir}/Siena.jar" basedir="${build.release.dir}" manifest="${build.release.dir}/Siena.MF" excludes="**"/>
	</target>

	<target name="createElbaStartJar">
		<createManifest targetApp="Elba" targetLoc="${build.release.dir}"/>
		<jar jarfile="${target.dir}/Elba.jar" basedir="${build.release.dir}" manifest="${build.release.dir}/Elba.MF" excludes="**"/>
	</target>

	<target name="copyFiles">
		<!-- this copies all files in libs itself, but not the subdiretories ("testing") -->
		<copy todir="${target.dir}/libs" includeEmptyDirs="no">
			<fileset dir="${libs.dir}">
				<include name="*" />
			</fileset>
		</copy>
		<fixcrlf srcDir="${target.dir}/libs" eol="crlf" includes="LICENSE.*" />
		<copy todir="${target.dir}/examples">
			<fileset dir="${examples.dir}">
				<include name="nodb/**"/>
				<include name="sql/**"/>
			</fileset>
		</copy>
		<fixcrlf srcDir="${target.dir}/examples" eol="crlf" includes="nodb/**, sql/**"/>
		<copy todir="${target.dir}">
			<fileset dir="${distfiles.dir}">
				<include name="**"/>
			</fileset>
		</copy>
		<!-- add some empty dirs to tell people where to put stuff -->
		<mkdir dir="${target.dir}/dbDrivers"/>
		<copy todir="${target.dir}/dbDrivers">
			<fileset dir="${src.dir}">
				<include name="databaseDrivers.txt"/>
			</fileset>
		</copy>
		<mkdir dir="${target.dir}/plugins"/>
		<copy todir="${target.dir}/plugins">
			<fileset dir="${src.dir}">
				<include name="plugins.txt"/>
			</fileset>
		</copy>
		<fixcrlf srcDir="${target.dir}" eol="crlf" includes="*.txt, *.bat, toscanaj.prop"/>
		<fixcrlf srcDir="${target.dir}/dbDrivers" eol="crlf" includes="databaseDrivers.txt"/>
		<fixcrlf srcDir="${target.dir}/plugins" eol="crlf" includes="plugins.txt"/>
		<fixcrlf srcDir="${target.dir}" eol="lf" includes="*.sh"/>
	</target>

	<target name="zipFile">
		<zip destfile="${dist.dir}/${app.name}-${dist.name}.zip">
			<fileset dir="${dist.dir}">
				<include name="${app.name}-${dist.name}/**"/>
			</fileset>
		</zip>
	</target>
	
	<target name="zipSplitFiles">
		<zip destfile="${dist.dir}/${app.name}-core-${dist.name}.zip">
			<fileset dir="${dist.dir}">
				<include name="${app.name}-${dist.name}/*"/>
			</fileset>
		</zip>
		<zip destfile="${dist.dir}/${app.name}-libs-${dist.name}.zip">
			<fileset dir="${dist.dir}">
				<include name="${app.name}-${dist.name}/libs/**"/>
			</fileset>
		</zip>
		<zip destfile="${dist.dir}/${app.name}-examples-${dist.name}.zip">
			<fileset dir="${dist.dir}">
				<include name="${app.name}-${dist.name}/examples/**"/>
			</fileset>
		</zip>
	</target>

	<!-- public targets -->
	<target name="clean" description="Removes all generated files and directories">
		<delete dir="${build.release.dir}"/>
		<delete dir="${build.dev.dir}"/>
		<delete dir="${dist.dir}"/>
		<delete dir="${javadoc.dir}"/>
	</target>
	
	<target name="compile" depends="prepare" description="Compiles the sources in debug mode">
		<javac srcdir="${src.dir}" destdir="${build.dev.dir}" debug="on" optimize="off" deprecation="on"
			target="${compiler.target.compliance}" source="${compiler.source.compliance}" encoding="${source.encoding}">
			<classpath refid="project.dev.class.path"/>
		</javac>
	</target>
	
	<target name="compileRelease" depends="prepare" description="Compiles the sources in release mode">
		<javac srcdir="${src.dir}" destdir="${build.release.dir}" debug="off" optimize="on" deprecation="off"
			target="${compiler.target.compliance}" source="${compiler.source.compliance}" encoding="${source.encoding}">
			<classpath refid="project.release.class.path"/>
		</javac>
	</target>
	
	<target name="test" depends="prepare" description="Runs all JUnit tests">
		<junit>
			<batchtest>
				<fileset dir="${src.dir}">
					<include name="**/tests/*.java"/>
					<exclude name="**/tests/AllTests.java"/>
				</fileset>
			</batchtest>
		</junit>
	</target>
	
	<target name="makeDebugJar" depends="compile,prepareDist" description="Creates the ToscanaJ.jar file including debug information">
		<createManifest targetApp="${app.name}" targetLoc="${build.dev.dir}"/>
		<jar jarfile="${target.dir}/${app.name}.jar" basedir="${build.dev.dir}" manifest="${build.dev.dir}/${app.name}.MF" excludes="${app.name}.MF"/>
	</target>
	
	<target name="dist" depends="makeReleaseJar,createSienaStartJar,createElbaStartJar,copyFiles,zipFile"
	        description="Creates the distribution files as used for releases"/>
	
	<target name="devDist" depends="setBuildName,prepareDist" description="Creates a developer download, containing everything needed to build">
		<zip destfile="${dist.dir}/${app.name}-dev-${dist.name}.zip">
			<fileset dir="${basedir}">
				<include name="${src.dir}/**"/>
				<include name="${libs.dir}/**"/>
				<include name="${examples.dir}/**"/>
				<include name="${distfiles.dir}/**"/>
				<include name="${templates.dir}/**"/>
				<include name="*"/>
			</fileset>
		</zip>
	</target>

	<target name="sourceDist" depends="setBuildName,prepareDist" description="Creates a source download -- just the Java source">
		<zip destfile="${dist.dir}/${app.name}-source-${dist.name}.zip">
			<fileset dir="${basedir}">
				<include name="source/**"/>
			</fileset>
		</zip>
	</target>

	<target name="splitDist" depends="makeReleaseJar,createSienaStartJar,createElbaStartJar,copyFiles,zipSplitFiles"
			description="Creates a distribution file containing only ToscanaJ, but not the libraries and examples. Useful for updates."/>
	
	<target name="javadoc" depends="prepare" description="Creates the JavaDoc for the program">
		<mkdir dir="${javadoc.dir}"/>
		<javadoc
			       encoding="${source.encoding}"
		           destdir="${javadoc.dir}"
		           author="false"
		           version="false"
		           use="true"
			       source="${compiler.source.compliance}"
		           windowtitle="ToscanaJ API Documentation">

		    <packageset dir="${src.dir}" defaultexcludes="yes">
		      <include name="**"/>
		      <exclude name="**/tests"/>
		    </packageset>

			<classpath refid="project.dev.class.path"/>

			<doctitle><![CDATA[<h1>ToscanaJ API Documentation</h1>]]></doctitle>
		    <bottom><![CDATA[<i>The ToscanaJ project</i>]]></bottom>
		    <tag name="todo" scope="all" description="To do:"/>
		    <group title="Model" packages="net.sourceforge.toscanaj.model*"/>
		    <group title="View" packages="net.sourceforge.toscanaj.view*"/>
		    <group title="Controller" packages="net.sourceforge.toscanaj.controller*"/>
		    <group title="GUI" packages="net.sourceforge.toscanaj.gui*"/>
		</javadoc>	
	</target>
	
	<target name="javadocDist" depends="javadoc,setBuildName,prepareDist" description="Creates a download containing the JavaDoc for the project">
		<zip destfile="${dist.dir}/${app.name}-javadoc-${dist.name}.zip">
			<fileset dir="${basedir}">
				<include name="${javadoc.dir}/**"/>
			</fileset>
		</zip>
	</target>
	
	<target name="fullDist" depends="dist,splitDist,sourceDist,javadocDist,devDist" description="Creates all available release downloads at once"/>

	<target name="run" depends="compileRelease" description="Starts ToscanaJ as build from source">
		<java classname="${toscanaj.class}" fork="true">
			<classpath refid="project.release.class.path"/>
		</java>
	</target>
	
	<target name="run-elba" depends="compileRelease" description="Starts Elba as build from source">
		<java classname="${elba.class}" fork="true">
			<classpath refid="project.release.class.path"/>
		</java>
	</target>
	
	<target name="run-siena" depends="compileRelease" description="Starts Siena as build from source">
		<java classname="${siena.class}" fork="true">
			<classpath refid="project.release.class.path"/>
		</java>
	</target>
</project>
