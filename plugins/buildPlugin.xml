<?xml version="1.0" encoding="UTF-8"?>
<project name="Build Plugin Script" default="makeJar" basedir=".">
	<description>
		Build file capable of compiling and building given plugin.
		Assumptions are that this script is called from build.xml
		located in the same directory. The calling script is expected
		to specify properties we need.
		
		This script can also be run standalone providing that needed
		properties will be set (see comments below ). To use this
		script as stanalone - copy it into the plugin directory.
		
		Assumptions about plugin directory structure:
		- plugin directory should contain source subdirectory will all 
			plugin source files.
		- plugin directory should contain libs subdirectory containing
			all libs (jar or zip files) needed by this plugin.
			
		The plugin files creates get a version number, which follows the
		scheme "CVSbuild-{timestamp}" by default. To give specific version
		numbers/names, add a file "version" into the main plugin dir and
		set the property "plugin.version.name" in it (standard Java
		property file format).
	</description>

	<!-- 
	These properties should be set if this script is run as 
	standalone
	-->

	<!-- plugin name a.e. MultivalentPlugin -->
	<property name="plugin.name" value="MultivalentDocumentHandlerPlugin"/>

	<!-- pluging destination directory name that will appear in plugins
		directory once plugin is deployed, for example,multivalent
		plugin will be deployed in plugins/multivalent, so 
		value here will be 'multivalent' -->
	<property name="plugin.dist.dir.name" value="multivalent"/>
	
	<!-- where to find compiled classes and the libraries (if needed) from the main application -->
	<property name="mainApp.classes" value="../../build/dev"/>
	<property name="mainApp.libs.dir" value="../../libs"/>

	<!-- usually these stay fixed -->
	<property name="plugin.build.dir" value="build"/>
	<property name="plugin.src.dir" value="source"/>
	<property name="plugin.libs.dir" value="libs"/>
	<property name="plugin.dist.dir" value="dist"/>
	<property name="plugin.jar.name" value="${plugin.name}.jar"/>
	<property name="plugin.description.file" value="plugin.txt"/>

    <path id="plugin.class.path">
        <pathelement path="${plugin.build.dir}"/>
        <pathelement path="${mainApp.classes}"/>
        <fileset dir="${plugin.libs.dir}">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${plugin.libs.dir}">
            <include name="**/*.zip"/>
        </fileset>
        <fileset dir="${mainApp.libs.dir}">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${mainApp.libs.dir}">
            <include name="**/*.zip"/>
        </fileset>
    </path>
    
	<target name="_tryReadingVersionNumber">
		<property file="${basedir}/version"/>
		<antcall target="_ensureVersionAvailable" inheritAll="true"/>
	</target>

	<target name="_prepare" depends="_setProperties">
		<mkdir dir="${plugin.build.dir}"/>
	</target>

	<target name="_setProperties" depends="_tryReadingVersionNumber, _ensureVersionAvailable">
		<property name="plugin.versioned.name" value="${plugin.name}-${plugin.version.name}"/>
	</target>

	<target name="_ensureVersionAvailable" unless="plugin.version.name">
		<tstamp>
    		<format property="timestamp" pattern="yyyyMMdd-HHmm"/>
		</tstamp>
		<!-- change this to a fixed value for releases -->
		<property name="plugin.version.name" value="CVSbuild-${timestamp}"/>
	</target>
	
	<target name="clean">
		<delete dir="${plugin.build.dir}"/>
		<delete dir="${plugin.dist.dir}"/>
		<delete file="${plugin.jar.name}"/>
	</target>

	<target name="compile" depends="_prepare">
		<javac srcdir="${plugin.src.dir}" 
				destdir="${plugin.build.dir}" debug="on" 
				optimize="off" deprecation="on"
				source="1.4">
			<classpath refid="plugin.class.path"/>
		</javac>
	</target>
	
	<target name="dist" depends="compile">	
		<mkdir dir="${plugin.dist.dir}"/>
		<property name="plugin.versioned.dist.dir.name" value="${plugin.dist.dir.name}-${plugin.version.name}"/>
		<property name="plugin.full.dist.dir" value="${plugin.dist.dir}/${plugin.versioned.dist.dir.name}"/>
		<mkdir dir="${plugin.full.dist.dir}"/>
		<jar jarfile="${plugin.full.dist.dir}/${plugin.jar.name}" basedir="${plugin.build.dir}" />
		<copy todir="${plugin.full.dist.dir}" includeEmptyDirs="no">
			<fileset dir="${basedir}">
		        <include name="libs/**"/>
		        <include name="${plugin.jar.name}"/>
	        	<include name="${plugin.description.file}"/>
	        	<include name="readme.txt"/>
            </fileset>
		</copy>
		<zip destfile="${plugin.dist.dir}/${plugin.versioned.name}.zip">
			<fileset dir="${plugin.dist.dir}">
				<include name="${plugin.versioned.dist.dir.name}/**"/>
			</fileset>
		</zip>		
	</target>

</project>