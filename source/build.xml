<?xml version="1.0" encoding="UTF-8"?>
<project name="ToscanaJ" default="compile" basedir="..">
	<property name="app.name" value="ToscanaJ"/>
	<property name="dist.name" value="ToscanaJ-CVSbuild"/>
	<property name="build.dev.dir" value="build/dev"/>
	<property name="build.release.dir" value="build/release"/>
	<property name="dist.dir" value="dist"/>
	<property name="doc.dir" value="javadoc"/>
	<property name="src.dir" value="source"/>
	<property name="libs.dir" value="libs"/>
	<property name="examples.dir" value="examples"/>
	<property name="toscanaj.class" 
           value="net.sourceforge.toscanaj.ToscanaJ"/>
    <property name="elba.class"
       value="net.sourceforge.toscanaj.Elba"/>
    <property name="siena.class"
       value="net.sourceforge.toscanaj.Siena"/>
    <property name="lucca.class"
       value="net.sourceforge.toscanaj.Lucca"/>
    <path id="project.dev.class.path">
        <pathelement path="${classpath}"/>
        <pathelement path="${build.dev.dir}"/>
        <fileset dir="${libs.dir}">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${libs.dir}">
            <include name="**/*.zip"/>
        </fileset>
        <fileset dir="${libs.dir}/testing">
            <include name="**/*.zip"/>
        </fileset>
    </path>
    <path id="project.release.class.path">
        <pathelement path="${classpath}"/>
        <pathelement path="${build.release.dir}"/>
        <fileset dir="${libs.dir}">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${libs.dir}">
            <include name="**/*.zip"/>
        </fileset>
        <fileset dir="${libs.dir}/testing">
            <include name="**/*.zip"/>
        </fileset>
    </path>
	<target name="prepare">
		<mkdir dir="${build.dev.dir}"/>
		<mkdir dir="${build.release.dir}"/>
	</target>
	<target name="clean">
		<delete dir="${build.release.dir}"/>
		<delete dir="${build.dev.dir}"/>
		<delete dir="${dist.dir}"/>
		<delete dir="${doc.dir}"/>
	</target>
	<target name="compile" depends="prepare">
		<javac srcdir="${src.dir}" destdir="${build.dev.dir}" debug="on" optimize="off" deprecation="on">
			<classpath refid="project.dev.class.path"/>
		</javac>
	</target>
	<target name="compileRelease" depends="prepare">
		<javac srcdir="${src.dir}" destdir="${build.release.dir}" debug="off" optimize="on" deprecation="off">
			<classpath refid="project.release.class.path"/>
		</javac>
	</target>
        <target name="rebuild" depends="clean,compile"/>
	<target name="test" depends="prepare">
        <junit>
            <batchtest>
                <fileset dir="${src.dir}">
                    <include name="**/tests/*.java"/>
                    <exclude name="**/tests/AllTests.java"/>
                </fileset>
            </batchtest>
        </junit>
	</target>
    <target name="prepareDist">
		<mkdir dir="${dist.dir}"/>
		<mkdir dir="${dist.dir}/${dist.name}"/>
	</target>
	<target name="makeDebugJar" depends="compile,prepareDist">
		<jar jarfile="${dist.dir}/${dist.name}/${app.name}.jar" basedir="${build.dev.dir}" manifest="${src.dir}/manifest.mf"/>
	</target>
	<target name="makeReleaseJar" depends="compileRelease,prepareDist">
		<jar jarfile="${dist.dir}/${dist.name}/${app.name}.jar" basedir="${build.release.dir}" manifest="${src.dir}/manifest.mf"/>
	</target>
	<target name="copyFiles">
        <!-- this copies all files in libs itself, but not the subdiretories ("testing") -->
		<copy todir="${dist.dir}/${dist.name}/libs" includeEmptyDirs="no">
			<fileset dir="${libs.dir}">
			        <include name="*"/>
                        </fileset>
		</copy>
		<fixcrlf srcDir="${dist.dir}/${dist.name}/libs" eol="crlf" includes="LICENSE.*"/>
		<copy todir="${dist.dir}/${dist.name}/examples">
			<fileset dir="${examples.dir}">
				<include name="nodb/**"/>
				<include name="sql/**"/>
			</fileset>
		</copy>
		<fixcrlf srcDir="${dist.dir}/${dist.name}/examples" eol="crlf" includes="nodb/**, sql/**"/>
		<copy todir="${dist.dir}/${dist.name}">
			<fileset dir="${src.dir}">
				<include name="*.txt"/>
				<include name="*.bat"/>
				<include name="*.sh"/>
				<include name="toscanaj.prop"/>
			</fileset>
		</copy>
		<fixcrlf srcDir="${dist.dir}/${dist.name}" eol="crlf" includes="*.txt, *.bat, toscanaj.prop"/>
		<fixcrlf srcDir="${dist.dir}/${dist.name}" eol="lf" includes="*.sh"/>
    </target>
	<target name="dist" depends="makeReleaseJar,copyFiles,zipFile">
	</target>
	<target name="zipFile">
		<zip destfile="${dist.dir}/${dist.name}-bin.zip">
			<fileset dir="${dist.dir}">
				<include name="${dist.name}/**"/>
			</fileset>
		</zip>
	</target>
    <target name="splitDist" depends="makeReleaseJar,copyFiles,zipSplitFiles">
	</target>
    <target name="zipSplitFiles">
		<zip destfile="${dist.dir}/${dist.name}-core-bin.zip">
			<fileset dir="${dist.dir}">
                <include name="${dist.name}/*"/>
			</fileset>
		</zip>
		<zip destfile="${dist.dir}/${dist.name}-libs-bin.zip">
			<fileset dir="${dist.dir}">
                <include name="${dist.name}/libs/**"/>
			</fileset>
		</zip>
		<zip destfile="${dist.dir}/${dist.name}-examples-bin.zip">
			<fileset dir="${dist.dir}">
                <include name="${dist.name}/examples/**"/>
            </fileset>
		</zip>
	</target>
	<target name="javadoc" depends="prepare">
		<mkdir dir="${doc.dir}"/>
		<javadoc sourcepath="${src.dir}" packagenames="net.sourceforge.toscanaj" destdir="${doc.dir}">
			<classpath refid="project.dev.class.path"/>
		</javadoc>
	</target>
	<target name="run" depends="compileRelease">
		<java classname="${toscanaj.class}" fork="true">
			<classpath refid="project.release.class.path"/>
		</java>
	</target>
    <target name="run-elba" depends="compileRelease">
        <java classname="${elba.class}" fork="true">
            <classpath refid="project.release.class.path"/>
        </java>
    </target>
    <target name="run-siena" depends="compileRelease">
        <java classname="${siena.class}" fork="true">
            <classpath refid="project.release.class.path"/>
        </java>
    </target>
    <target name="run-lucca" depends="compileRelease">
        <java classname="${lucca.class}" fork="true">
            <classpath refid="project.release.class.path"/>
        </java>
    </target>
</project>
