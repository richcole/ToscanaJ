<?xml version="1.0" encoding="UTF-8"?>
<project name="ToscanaJ" default="dist" basedir="..">
	<!-- change this to a fixed value for releases -->
	<target name="setBuildName">
		<tstamp>
			<format property="timestamp" pattern="yyyyMMdd-HHmm"/>
		</tstamp>
		<property name="dist.name" value="ToscanaJ-CVSbuild-${timestamp}"/>
	</target>

	<property name="app.name" value="ToscanaJ"/>
	<property name="build.dev.dir" value="build/dev"/>
	<property name="build.release.dir" value="build/release"/>
	<property name="dist.dir" value="dist"/>
	<property name="doc.dir" value="javadoc"/>
	<property name="src.dir" value="source"/>
	<property name="libs.dir" value="libs"/>
	<property name="examples.dir" value="examples"/>
	<property name="toscanaj.class" 
           value="net.sourceforge.toscanaj.ToscanaJ"/>
	<property name="elba.class"
       value="net.sourceforge.toscanaj.Elba"/>
	<property name="siena.class"
       value="net.sourceforge.toscanaj.Siena"/>
	<path id="project.libs.class.path">
		<fileset dir="${libs.dir}">
			<include name="**/*.jar"/>
		</fileset>
		<fileset dir="${libs.dir}">
			<include name="**/*.zip"/>
		</fileset>
	</path>
	<path id="project.dev.class.path">
		<pathelement path="${classpath}"/>
		<pathelement path="${build.dev.dir}"/>
		<path refid="project.libs.class.path"/>
		<fileset dir="${libs.dir}/testing">
			<include name="**/*.zip"/>
		</fileset>
	</path>
	<path id="project.release.class.path">
		<pathelement path="${classpath}"/>
		<pathelement path="${build.release.dir}"/>
		<path refid="project.libs.class.path"/>
		<fileset dir="${libs.dir}/testing">
			<include name="**/*.zip"/>
		</fileset>
	</path>
	<target name="prepare" depends="setBuildName">
		<mkdir dir="${build.dev.dir}"/>
		<mkdir dir="${build.release.dir}"/>
	</target>
	<target name="clean">
		<delete dir="${build.release.dir}"/>
		<delete dir="${build.dev.dir}"/>
		<delete dir="${dist.dir}"/>
		<delete dir="${doc.dir}"/>
	</target>
	<target name="compile" depends="prepare">
		<javac srcdir="${src.dir}" destdir="${build.dev.dir}" debug="on" optimize="off" deprecation="on"
			target="1.4" source="1.4">
			<classpath refid="project.dev.class.path"/>
		</javac>
	</target>
	<target name="compileRelease" depends="prepare">
		<javac srcdir="${src.dir}" destdir="${build.release.dir}" debug="off" optimize="on" deprecation="off"
			target="1.4" source="1.4">
			<classpath refid="project.release.class.path"/>
		</javac>
	</target>
	<target name="rebuild" depends="clean,compile"/>
	<target name="test" depends="prepare">
		<junit>
			<batchtest>
				<fileset dir="${src.dir}">
					<include name="**/tests/*.java"/>
					<exclude name="**/tests/AllTests.java"/>
				</fileset>
			</batchtest>
		</junit>
	</target>
	<target name="prepareDist">
		<mkdir dir="${dist.dir}"/>
		<mkdir dir="${dist.dir}/${dist.name}"/>
	</target>
	<target name="makeDebugJar" depends="compile,prepareDist">
		<createManifest targetApp="${app.name}" targetLoc="${build.dev.dir}"/>
		<jar jarfile="${dist.dir}/${dist.name}/${app.name}.jar" basedir="${build.dev.dir}" manifest="${build.dev.dir}/${app.name}.MF" excludes="${app.name}.MF"/>
	</target>
	<target name="makeReleaseJar" depends="compileRelease,prepareDist">
		<createManifest targetApp="${app.name}" targetLoc="${build.release.dir}"/>
		<jar jarfile="${dist.dir}/${dist.name}/${app.name}.jar" basedir="${build.release.dir}" manifest="${build.release.dir}/${app.name}.MF" excludes="${app.name}.MF"/>
	</target>
	<target name="createSienaStartJar">
		<createManifest targetApp="Siena" targetLoc="${build.release.dir}"/>
		<jar jarfile="${dist.dir}/${dist.name}/Siena.jar" basedir="${build.release.dir}" manifest="${build.release.dir}/Siena.MF" excludes="**"/>
	</target>
	<target name="createElbaStartJar">
		<createManifest targetApp="Elba" targetLoc="${build.release.dir}"/>
		<jar jarfile="${dist.dir}/${dist.name}/Elba.jar" basedir="${build.release.dir}" manifest="${build.release.dir}/Elba.MF" excludes="**"/>
	</target>
	<macrodef name="createManifest">
		<attribute name="targetApp"/>
		<attribute name="targetLoc"/>
		<sequential>
			<property name="cp" refid="project.libs.class.path"/>

			<!-- copy manifest over, replacing the @classpath@ placeholder -->
			<copy tofile="@{targetLoc}/@{targetApp}.MF" filtering="true">
				<fileset dir="${src.dir}">
					<include name="manifest.mf" />
				</fileset>
				<filterset>
					<filter token = "classpath" value = "${cp} ToscanaJ.jar" />
					<filter token = "app" value = "@{targetApp}" />
				</filterset>
			</copy>
	
			<!-- replace path prefix with relative path -->
			<replace file="@{targetLoc}/@{targetApp}.MF" token="${basedir}" value="." />
	
			<!-- deal with file and path separators in an os independent way -->
			<replace file="@{targetLoc}/@{targetApp}.MF" token="${file.separator}" value="/" />
			<replace file="@{targetLoc}/@{targetApp}.MF" token="${path.separator}" value=" " />
		</sequential>
	</macrodef>
	<target name="copyFiles">
		<!-- this copies all files in libs itself, but not the subdiretories ("testing") -->
		<copy todir="${dist.dir}/${dist.name}/libs" includeEmptyDirs="no">
			<fileset dir="${libs.dir}">
				<include name="*" />
			</fileset>
		</copy>
		<fixcrlf srcDir="${dist.dir}/${dist.name}/libs" eol="crlf" includes="LICENSE.*" />
		<copy todir="${dist.dir}/${dist.name}/examples">
			<fileset dir="${examples.dir}">
				<include name="nodb/**"/>
				<include name="sql/**"/>
			</fileset>
		</copy>
		<fixcrlf srcDir="${dist.dir}/${dist.name}/examples" eol="crlf" includes="nodb/**, sql/**"/>
		<copy todir="${dist.dir}/${dist.name}">
			<fileset dir="${src.dir}">
				<include name="*.txt"/>
				<exclude name="databaseDrivers.txt"/>
				<exclude name="plugins.txt"/>
				<include name="*.bat"/>
				<include name="*.sh"/>
				<include name="toscanaj.prop"/>
			</fileset>
		</copy>
		<!-- add some empty dirs to tell people where to put stuff -->
		<mkdir dir="${dist.dir}/${dist.name}/dbDrivers"/>
		<copy todir="${dist.dir}/${dist.name}/dbDrivers">
			<fileset dir="${src.dir}">
				<include name="databaseDrivers.txt"/>
			</fileset>
		</copy>
		<mkdir dir="${dist.dir}/${dist.name}/plugins"/>
		<copy todir="${dist.dir}/${dist.name}/plugins">
			<fileset dir="${src.dir}">
				<include name="plugins.txt"/>
			</fileset>
		</copy>
		<fixcrlf srcDir="${dist.dir}/${dist.name}" eol="crlf" includes="*.txt, *.bat, toscanaj.prop"/>
		<fixcrlf srcDir="${dist.dir}/${dist.name}/dbDrivers" eol="crlf" includes="databaseDrivers.txt"/>
		<fixcrlf srcDir="${dist.dir}/${dist.name}/plugins" eol="crlf" includes="plugins.txt"/>
		<fixcrlf srcDir="${dist.dir}/${dist.name}" eol="lf" includes="*.sh"/>
	</target>
	<target name="dist" depends="makeReleaseJar,createSienaStartJar,createElbaStartJar,copyFiles,zipFile">
	</target>
	<target name="zipFile">
		<zip destfile="${dist.dir}/${dist.name}.zip">
			<fileset dir="${dist.dir}">
				<include name="${dist.name}/**"/>
			</fileset>
		</zip>
	</target>
	<target name="splitDist" depends="makeReleaseJar,createSienaStartJar,createElbaStartJar,copyFiles,zipSplitFiles">
	</target>
	<target name="zipSplitFiles">
		<zip destfile="${dist.dir}/${dist.name}-core.zip">
			<fileset dir="${dist.dir}">
				<include name="${dist.name}/*"/>
			</fileset>
		</zip>
		<zip destfile="${dist.dir}/${dist.name}-libs.zip">
			<fileset dir="${dist.dir}">
				<include name="${dist.name}/libs/**"/>
			</fileset>
		</zip>
		<zip destfile="${dist.dir}/${dist.name}-examples.zip">
			<fileset dir="${dist.dir}">
				<include name="${dist.name}/examples/**"/>
			</fileset>
		</zip>
	</target>
	<target name="javadoc" depends="prepare">
		<mkdir dir="${doc.dir}"/>
		<javadoc sourcepath="${src.dir}" packagenames="net.sourceforge.toscanaj" destdir="${doc.dir}">
			<classpath refid="project.dev.class.path"/>
		</javadoc>
	</target>
	<target name="run" depends="compileRelease">
		<java classname="${toscanaj.class}" fork="true">
			<classpath refid="project.release.class.path"/>
		</java>
	</target>
	<target name="run-elba" depends="compileRelease">
		<java classname="${elba.class}" fork="true">
			<classpath refid="project.release.class.path"/>
		</java>
	</target>
	<target name="run-siena" depends="compileRelease">
		<java classname="${siena.class}" fork="true">
			<classpath refid="project.release.class.path"/>
		</java>
	</target>
</project>
